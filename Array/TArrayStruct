#include <iostream>
#include <vector>
class out_of_range
	:public std::exception
{

};
template < class T, std::size_t N >
struct Array
{
	using value_type = T;
	using size_type = size_t;
	using iterator = value_type *;
	using reference = value_type&;
	using const_reference = const value_type&;
private:
	value_type Data[N];
public:
	Array()
	{}
	Array(std::initializer_list<T> l) : Array() 
	{
		std::copy(l.begin(), l.end(), Data);
	}	
	reference at(size_type pos) const
	{
		if (pos < N)
		{
			return Data[pos];
		}
		throw out_of_range();
	}
	const_reference at(size_type pos) 
	{
		if (pos < N)
		{
			return Data[pos];
		}
		throw out_of_range();
	}
	iterator begin() const
	{
		return Data;
	}
	
	iterator end() const
	{
		return Data + N;
	}
	size_type size() const throw()
	{
		return N;
	}
	bool empty() const throw()
	{
		return N == 0;
	}
	reference operator[] (size_type numb) const 
	{ 
		if (0 <= numb && numb < N)
		{
			return Data[numb];
		}
		throw out_of_range();
	}
	const_reference operator[] (size_type numb) 
	{ 
		if (0 <= numb && numb < N)
		{
			return Data[numb];
		}
			throw out_of_range();
	}
	reference front() throw()
	{
		return Data[0];
	}
	reference back() throw()
	{
		return Data[N - 1];
	}
	T* data() const
	{
		return Data; 
	}
	void fill(const value_type val)
	{
		for (int i = 0; i < N; ++i)
		{
			Data[i] = val;
		}
	}

	bool operator < (const Array& obj)
	{
		if (size() == obj.size())
		{
			size_t check = 0;
			{
				for (size_t i = 0; i < size(); ++i)
				{
					if (Data[i] < obj.Data[i]) //т.к. сравниваем лексикографически
					{
						return true;
					}
				}
				return false;
			}
		}
		else if (size() < obj.size())
		{
			return true;
		}
		return false;
	}
	bool operator == (const Array& obj)
	{
		if (size() == obj.size())
		{
			for (size_t i = 0; i < size(); ++i)
			{
				if (Data[i] != obj.Data[i])
				{
					return false;
				}
			}
			return true;
		}
		return false;
	}
	void swap(Array<T, N> & obj) throw()
	{
		std::swap(Data, obj.Data);
	}
};
